{"version":3,"sources":["../src/map.js"],"names":["OrderedMap","ohamt","empty","constructor","prototype","__is_Map","_type","m","kv","append","call","$","$k","$v","len","arguments","length","get","set","isMap","maybe","fromEntries","entries","_create","beginMutation","k","v","endMutation","make","keyEq","x","y","Object","eq","map","a","l","s","merge","Array","isArray","mergeAll","$m","undefined","reduce","pre","cur","keys","contains","has","size","count","forEachEntry","fn","entry","remove","delete"],"mappings":"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","sourcesContent":["import * as ohamt from \"ohamt\";\n\nimport { isSeq, from, forEach } from \"./seq\";\n\nimport { isObject } from \"./util\";\n\n//import { map } from \"./access\";\n\nimport { error } from \"./error\";\n\n//import { eq } from \"./op\";\n\nconst OrderedMap = ohamt.empty.constructor;\n\nOrderedMap.prototype.__is_Map = true;\n\nOrderedMap.prototype._type = 6;\n\nOrderedMap.prototype[\"@@transducer/init\"] = function(){\n\treturn ohamt.empty;\n};\n\nOrderedMap.prototype[\"@@transducer/step\"] = function(m,kv) {\n\treturn m.append(kv[0],kv[1]);\n};\n\nOrderedMap.prototype[\"@@transducer/result\"] = function(m) {\n\treturn m;\n};\n\nOrderedMap.prototype.call = function($,$k,$v) {\n\tconst len = arguments.length;\n\tif(len == 2) return get(this,$k);\n\tif(len == 3) return set(this,$k,$v);\n\treturn this;\n};\n\nexport function isMap(maybe){\n\treturn !!(maybe && maybe.__is_Map);\n}\n\nexport const fromEntries = (entries, m = _create()) => {\n\tm = m.beginMutation();\n\tfor(const [k,v] of entries) m = m.set(k,v);\n\treturn m.endMutation();\n};\n\nconst _create = () => ohamt.make({\n\tkeyEq: (x,y) => x instanceof Object && \"eq\" in x ? x.eq(y) : x === y\n});\n\nexport function map(...a) {\n\tvar l = a.length;\n\tif (l === 0) {\n\t\treturn _create();\n\t}\n\tif (l == 1) {\n\t\tvar s = a[0];\n\t\tif (isSeq(s)) return merge(s);\n\t\tif (isMap(s)) return s;\n\t\tif (isObject(s)) return fromEntries(Object.entries(s));\n\t\tif(Array.isArray(s)) return fromEntries(s);\n\t\t// TODO VNode conversion + detect tuple\n\t\t//if ((0, _access.map)()(s)) return s.toMap();\n\t\treturn error(\"XXX\", \"Not a map or tuple\");\n\t}\n\t// expect a sequence of maps or each argument to be a map\n\treturn merge(from(a).mergeAll());\n}\n\nexport function merge($m) {\n\tif ($m === undefined) return error(\"XPTY0004\");\n\t// assume a sequence of vectors\n\treturn $m.reduce((pre, cur) => {\n\t\t// TODO force persistent cx\n\t\t//if ((0, _access.map)()(cur)) cur = cur.toMap();\n\t\tif (!isMap(cur)) {\n\t\t\treturn error(\"XPTY0004\", \"One of the items for map:merge is not a map.\");\n\t\t}\n\t\treturn fromEntries(cur, pre);\n\t}, _create());\n}\n\nexport function set(m, k, v) {\n\treturn m.set(k,v);\n}\n\nexport function keys(m) {\n\treturn m.keys();\n}\n\nexport function contains(m, k) {\n\treturn m => m.has(k);\n}\n\nexport function size(m) {\n\treturn m.count();\n}\n\nexport function forEachEntry(m, fn) {\n\treturn forEach(from(m.entries()),([k,v]) => fn(k, v));\n}\n\nexport function entry(k, v) {\n\t// TODO template errors\n\treturn fromEntries([[k,v]]);\n}\n\nexport function get(m, k) {\n\treturn m.has(k) ? m.get(k) : null;\n}\n\nexport function remove(m, k) {\n\treturn m.delete(k);\n}\n\nexport { set as put, map as default };\n"],"file":"map.js"}