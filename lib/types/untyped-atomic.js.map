{"version":3,"sources":["../../src/types/untyped-atomic.js"],"names":["UntypedAtomic","String","constructor","a","_value","toString","valueOf"],"mappings":";;;;;;;AAAO,MAAMA,aAAN,SAA4BC,MAA5B,CAAmC;AACzCC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACd,UAAMA,CAAN;AACA,SAAKC,MAAL,GAAcD,CAAd;AACA,GAJwC,CAKzC;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;AACAE,EAAAA,QAAQ,GAAG;AACV,WAAO,KAAKD,MAAL,CAAYC,QAAZ,EAAP;AACA;;AACDC,EAAAA,OAAO,GAAG;AACT,WAAO,KAAKF,MAAL,CAAYE,OAAZ,EAAP;AACA;;AAzBwC;;;eA4B3BN,a","sourcesContent":["export class UntypedAtomic extends String {\n\tconstructor(a) {\n\t\tsuper(a);\n\t\tthis._value = a;\n\t}\n\t//cast(other) {\n\t//If the atomic value is an instance of xdt:untypedAtomic\n\t//and the other is an instance of a numeric type,\n\t//then the xdt:untypedAtomic value is cast to the type xs:double.\n\n\t//If the atomic value is an instance of xdt:untypedAtomic\n\t//and the other is an instance of xdt:untypedAtomic or xs:string,\n\t//then the xdt:untypedAtomic value is cast to the type xs:string.\n\n\t//If the atomic value is an instance of xdt:untypedAtomic\n\t//and the other is not an instance of xs:string, xdt:untypedAtomic, or any numeric type,\n\t//then the xdt:untypedAtomic value is cast to the dynamic type of the other value.\n\n\t// NO-OP, moved elsewhere\n\t//}\n\ttoString() {\n\t\treturn this._value.toString();\n\t}\n\tvalueOf() {\n\t\treturn this._value.valueOf();\n\t}\n}\n\nexport default UntypedAtomic;\n"],"file":"untyped-atomic.js"}