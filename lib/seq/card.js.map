{"version":3,"sources":["../../src/seq/card.js"],"names":["isZeroOrOne","s","isOneOrMore","not","isExactlyOne","x","y","_testCard","$arg","card","err","t","zeroOrOne","oneOrMore","exactlyOne"],"mappings":";;;;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAOA;;AAEO,MAAMA,WAAW,GAAGC,CAAC,IAAI,kBAAQA,CAAR,KAAc,CAAC,gBAAMA,CAAN,CAAf,IAA2B,gBAAK,qBAAK,CAAL,CAAL,EAAa,yBAAb,EAAwBA,CAAxB,CAApD;;;;AAEA,MAAMC,WAAW,GAAGD,CAAC,IAAK,CAAC,gBAAMA,CAAN,CAAD,IAAa,CAAC,kBAAOA,CAAP,CAAf,IAA6B,gBAAK,yBAAL,EAAe,oBAAIE,SAAJ,CAAf,EAAyBF,CAAzB,CAAtD;;;;AAEA,MAAMG,YAAY,GAAGH,CAAC,IAAI,mBAASA,CAAT,KAAgB,CAAC,gBAAMA,CAAN,CAAD,IAAa,CAAC,kBAAOA,CAAP,CAA9B,IAA4C,gBAAK,yBAAL,EAAe,oBAAI,gBAAK,qBAAK,CAAL,CAAL,EAAa,yBAAb,EAAwBA,CAAxB,CAAJ,EAA+B,CAACI,CAAD,EAAIC,CAAJ,KAAU,CAACD,CAAD,IAAMC,CAA/C,CAAf,EAAkEL,CAAlE,CAAtE;;;;AAGP,SAASM,SAAT,CAAmBC,IAAnB,EAAwBC,IAAxB,EAA6BC,GAA7B,EAAkC;AACjC,SAAO,oBAAUC,CAAC,IAAIA,CAAC,GAAGH,IAAH,GAAU,kBAAME,GAAN,CAA1B,EAAsCD,IAAI,CAACD,IAAD,CAA1C,CAAP;AACA;AAED;;;;;;;AAKO,SAASI,SAAT,CAAmBJ,IAAnB,EAAyB;AAC/B,SAAOD,SAAS,CAACC,IAAD,EAAMR,WAAN,EAAkB,UAAlB,CAAhB;AACA;AACD;;;;;;;AAKO,SAASa,SAAT,CAAmBL,IAAnB,EAAyB;AAC/B,SAAOD,SAAS,CAACC,IAAD,EAAMN,WAAN,EAAkB,UAAlB,CAAhB;AACA;AACD;;;;;;;AAKO,SAASY,UAAT,CAAoBN,IAApB,EAA0B;AAChC,SAAOD,SAAS,CAACC,IAAD,EAAMJ,YAAN,EAAmB,UAAnB,CAAhB;AACA","sourcesContent":["import { isSeq, isMaybe, isSingle, switchMap } from \"../seq\";\n\nimport { error } from \"../error\";\n\nimport { not } from \"../impl\";\n\nimport { pipe } from \"rxjs\";\n\nimport {\n\tmap,\n\tskip,\n\tzip,\n\tisEmpty\n} from \"rxjs/operators\";\n\nimport { isNull } from \"../util\";\n\nexport const isZeroOrOne = s => isMaybe(s) || !isSeq(s) || pipe(skip(1),isEmpty())(s);\n\nexport const isOneOrMore = s => (!isSeq(s) && !isNull(s)) || pipe(isEmpty(),map(not))(s);\n\nexport const isExactlyOne = s => isSingle(s) || (!isSeq(s) && !isNull(s)) || pipe(isEmpty(),zip(pipe(skip(1),isEmpty())(s),(x, y) => !x && y))(s);\n\n\nfunction _testCard($arg,card,err) {\n\treturn switchMap(t => t ? $arg : error(err))(card($arg));\n}\n\n/**\n * [zeroOrOne returns arg OR error if arg not zero or one]\n * @param  {Seq} $arg [Sequence to test]\n * @return {Seq|Error} [Process Error in implementation]\n */\nexport function zeroOrOne($arg) {\n\treturn _testCard($arg,isZeroOrOne,\"FORG0003\");\n}\n/**\n * [oneOrMore returns arg OR error if arg not one or more]\n * @param  {Seq} $arg [Sequence to test]\n * @return {Seq|Error}      [Process Error in implementation]\n */\nexport function oneOrMore($arg) {\n\treturn _testCard($arg,isOneOrMore,\"FORG0004\");\n}\n/**\n * [exactlyOne returns arg OR error if arg not exactly one]\n * @param  {Seq} $arg [Sequence to test]\n * @return {Seq|Error}      [Process Error in implementation]\n */\nexport function exactlyOne($arg) {\n\treturn _testCard($arg,isExactlyOne,\"FORG0005\");\n}\n"],"file":"card.js"}