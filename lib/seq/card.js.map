{"version":3,"sources":["../../src/seq/card.js"],"names":["isZeroOrOne","s","isOneOrMore","not","isExactlyOne","x","y","_testCard","$arg","card","err","t","zeroOrOne","oneOrMore","exactlyOne"],"mappings":";;;;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AAEA;;AAOA;;AAEO,MAAMA,cAAcC,KAAK,kBAAQA,CAAR,KAAc,CAAC,gBAAMA,CAAN,CAAf,IAA2B,gBAAK,qBAAK,CAAL,CAAL,EAAa,yBAAb,EAAwBA,CAAxB,CAApD;;;;AAEA,MAAMC,cAAcD,KAAM,CAAC,gBAAMA,CAAN,CAAD,IAAa,CAAC,kBAAOA,CAAP,CAAf,IAA6B,gBAAK,yBAAL,EAAe,oBAAIE,SAAJ,CAAf,EAAyBF,CAAzB,CAAtD;;;;AAEA,MAAMG,eAAeH,KAAK,mBAASA,CAAT,KAAgB,CAAC,gBAAMA,CAAN,CAAD,IAAa,CAAC,kBAAOA,CAAP,CAA9B,IAA4C,gBAAK,yBAAL,EAAe,oBAAI,gBAAK,qBAAK,CAAL,CAAL,EAAa,yBAAb,EAAwBA,CAAxB,CAAJ,EAA+B,CAACI,CAAD,EAAIC,CAAJ,KAAU,CAACD,CAAD,IAAMC,CAA/C,CAAf,EAAkEL,CAAlE,CAAtE;;;;AAGP,SAASM,SAAT,CAAmBC,IAAnB,EAAwBC,IAAxB,EAA6BC,GAA7B,EAAkC;AACjC,SAAO,oBAAUC,KAAKA,IAAIH,IAAJ,GAAW,kBAAME,GAAN,CAA1B,EAAsCD,KAAKD,IAAL,CAAtC,CAAP;AACA;AAED;;;;;;;AAKO,SAASI,SAAT,CAAmBJ,IAAnB,EAAyB;AAC/B,SAAOD,UAAUC,IAAV,EAAeR,WAAf,EAA2B,UAA3B,CAAP;AACA;AACD;;;;;;;AAKO,SAASa,SAAT,CAAmBL,IAAnB,EAAyB;AAC/B,SAAOD,UAAUC,IAAV,EAAeN,WAAf,EAA2B,UAA3B,CAAP;AACA;AACD;;;;;;;AAKO,SAASY,UAAT,CAAoBN,IAApB,EAA0B;AAChC,SAAOD,UAAUC,IAAV,EAAeJ,YAAf,EAA4B,UAA5B,CAAP;AACA","sourcesContent":["import { isSeq, isMaybe, isSingle, switchMap } from \"../seq\";\r\n\r\nimport { error } from \"../error\";\r\n\r\nimport { not } from \"../impl\";\r\n\r\nimport { pipe } from \"rxjs\";\r\n\r\nimport {\r\n\tmap,\r\n\tskip,\r\n\tzip,\r\n\tisEmpty\r\n} from \"rxjs/operators\";\r\n\r\nimport { isNull } from \"../util\";\r\n\r\nexport const isZeroOrOne = s => isMaybe(s) || !isSeq(s) || pipe(skip(1),isEmpty())(s);\r\n\r\nexport const isOneOrMore = s => (!isSeq(s) && !isNull(s)) || pipe(isEmpty(),map(not))(s);\r\n\r\nexport const isExactlyOne = s => isSingle(s) || (!isSeq(s) && !isNull(s)) || pipe(isEmpty(),zip(pipe(skip(1),isEmpty())(s),(x, y) => !x && y))(s);\r\n\r\n\r\nfunction _testCard($arg,card,err) {\r\n\treturn switchMap(t => t ? $arg : error(err))(card($arg));\r\n}\r\n\r\n/**\r\n * [zeroOrOne returns arg OR error if arg not zero or one]\r\n * @param  {Seq} $arg [Sequence to test]\r\n * @return {Seq|Error} [Process Error in implementation]\r\n */\r\nexport function zeroOrOne($arg) {\r\n\treturn _testCard($arg,isZeroOrOne,\"FORG0003\");\r\n}\r\n/**\r\n * [oneOrMore returns arg OR error if arg not one or more]\r\n * @param  {Seq} $arg [Sequence to test]\r\n * @return {Seq|Error}      [Process Error in implementation]\r\n */\r\nexport function oneOrMore($arg) {\r\n\treturn _testCard($arg,isOneOrMore,\"FORG0004\");\r\n}\r\n/**\r\n * [exactlyOne returns arg OR error if arg not exactly one]\r\n * @param  {Seq} $arg [Sequence to test]\r\n * @return {Seq|Error}      [Process Error in implementation]\r\n */\r\nexport function exactlyOne($arg) {\r\n\treturn _testCard($arg,isExactlyOne,\"FORG0005\");\r\n}\r\n"],"file":"card.js"}