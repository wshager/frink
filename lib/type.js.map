{"version":3,"sources":["../src/type.js"],"names":["operatorMap","unaryOperatorMap","generalOperatorMap","Object","assign","String","prototype","compProto","Float","opProto","Number","Boolean","ap10","a","b","asType","cc","ifEmpty","prep","decimal","Decimal","integer","Integer","string","data","toString","number","NaN","float","double","castAs","to","call","f","_binOp","op","invert","ret","undefined","_promote","_unaOp","c","constructor","d","UntypedAtomic","generalComp","opfn","$a","$b","x","and","impl","or","logic","not","opinv","ne","operator","comp","general","operatorName","hasUnaOp","hasOwnProperty","hasOp","bind","md","node","type","nodeData","has","obj","prop","m","reduce","o","$key","$value","l","e","qname","len","length","$name","$children","i","push","key","val"],"mappings":"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","sourcesContent":["import Decimal from \"big.js\";\r\n\r\nimport Integer from \"./types/integer\";\r\n\r\nimport Float from \"./types/float\";\r\n\r\nimport UntypedAtomic from \"./types/untyped-atomic\";\r\n\r\nimport opProto from \"./types/op-proto\";\r\n\r\nimport compProto from \"./types/comp-proto\";\r\n\r\nimport { stringJoin } from \"./string/value\";\r\n\r\nimport { error } from \"./error\";\r\n\r\nimport { forEach, filter, range, switchMap, pipe, first } from \"./seq\";\r\n\r\nimport { get as aGet } from \"./array\";\r\n\r\nimport { get as mGet } from \"./map\";\r\n\r\nimport { isUndef, isNull, isList, isMap } from \"./util\";\r\n\r\nimport { isVNode, traverse } from \"l3n\";\r\n\r\nimport { boolean, not } from \"./boolean/value\";\r\n\r\nimport * as impl from \"./impl\";\r\n\r\n// TODO complete math (e.g. type checks for idiv and friends)\r\n\r\n// one big pile\r\nexport const operatorMap = {\r\n\t\"+\": \"plus\",\r\n\t\"-\": \"minus\",\r\n\t\"*\": \"times\",\r\n\t\"div\": \"div\",\r\n\t\"/\": \"div\",\r\n\t\"idiv\": \"div\",\r\n\t\"eq\": \"eq\",\r\n\t\"ne\": \"eq\",\r\n\t\"gt\": \"gt\",\r\n\t\"lt\": \"lt\",\r\n\t\"ge\": \"gte\",\r\n\t\"le\": \"gte\",\r\n\t\"&&\": \"and\",\r\n\t\"||\": \"or\",\r\n\t\"!\": \"not\"\r\n};\r\n\r\nconst unaryOperatorMap = {\r\n\t\"-\": \"neg\"\r\n};\r\n\r\nexport const generalOperatorMap = {\r\n\t\">\": \"gt\",\r\n\t\"<\": \"lt\",\r\n\t\">=\": \"gte\",\r\n\t\"<=\": \"lte\",\r\n\t\"=\": \"eq\",\r\n\t\"!=\": \"eq\"\r\n};\r\n\r\n// mixin comparators\r\nObject.assign(String.prototype, compProto);\r\n\r\nObject.assign(Float.prototype, compProto, opProto);\r\n\r\nObject.assign(Number.prototype, compProto, opProto);\r\n\r\nObject.assign(Boolean.prototype, compProto);\r\n\r\n// TODO decimal opt-in/out\r\n\r\nconst ap10 = (a,b) => b(a);\r\n\r\nconst asType = (cc,ifEmpty = null,prep = ap10) => a => isUndef(a) ? cc : isNull(a) ? ifEmpty : prep(a,cc);\r\n\r\n// TODO create from Type classes\r\nexport const decimal = asType(Decimal);\r\n\r\nexport const integer = asType(Integer);\r\n\r\nexport const string = asType(String,\"\",a => isVNode(a) ? data(a).toString() : a.toString());\r\n\r\nexport const number = asType(Number,NaN,a => +a);\r\n\r\n// 32-bits float\r\nexport const float = asType(Float,NaN);\r\n\r\nexport const double = number;\r\n\r\nexport function castAs(a, b) {\r\n\treturn b(a);\r\n}\r\n\r\nexport function to(a, b) {\r\n\treturn range(b, a);\r\n}\r\n\r\nexport function call(f,...a) {\r\n\tif (isList(f)) {\r\n\t\treturn aGet(f,a[0]);\r\n\t} else if (isMap(f)) {\r\n\t\treturn mGet(f,a[0]);\r\n\t} else {\r\n\t\treturn f(...a);\r\n\t}\r\n}\r\n\r\nfunction _binOp(op, invert, a, b) {\r\n\tvar ret;\r\n\tif (a === undefined || b === undefined) {\r\n\t\treturn error(\"A value may never be undefined\");\r\n\t}\r\n\tif (typeof a[op] == \"function\") {\r\n\t\t[a,b] = _promote(a, b);\r\n\t\tret = a[op](b);\r\n\t} else {\r\n\t\treturn error(\"XPST0017\",\"Operator \" + op + \" not implemented\");\r\n\t}\r\n\treturn invert ? !ret : ret;\r\n}\r\n\r\n\r\nfunction _unaOp(op, invert, a) {\r\n\tvar ret;\r\n\tif (a === undefined) {\r\n\t\treturn error(\"A value may never be undefined\");\r\n\t}\r\n\tif (typeof a[op] == \"function\") {\r\n\t\tret = a[op]();\r\n\t} else {\r\n\t\treturn error(\"XPST0017\",\"Operator \" + op + \" not implemented\");\r\n\t}\r\n\treturn invert ? !ret : ret;\r\n}\r\n\r\nfunction _promote(a, b) {\r\n\t// TODO use JS type casting: 1 == \"1\"\r\n\t//If each operand is an instance of one of the types xs:string or xs:anyURI, then both operands are cast to type xs:string.\r\n\t//If each operand is an instance of one of the types xs:decimal or xs:float, then both operands are cast to type xs:float.\r\n\t//If each operand is an instance of one of the types xs:decimal, xs:float, or xs:double, then both operands are cast to type xs:double.\r\n\tvar c = a.constructor,\r\n\t\td = b.constructor;\r\n\tif (c == Number || d == Number) {\r\n\t\tif (c == Integer || c == Decimal || c == Float || c == UntypedAtomic) {\r\n\t\t\ta = +a.toString();\r\n\t\t\tc = Number;\r\n\t\t}\r\n\t\tif (d == Integer || d == Decimal || d == Float || d == UntypedAtomic) {\r\n\t\t\tb = +b.toString();\r\n\t\t\td = Number;\r\n\t\t}\r\n\t}\r\n\tif (c == Integer || d == Integer) {\r\n\t\tif (c == Decimal || c == UntypedAtomic) {\r\n\t\t\ta = c == UntypedAtomic ? new Integer(a.toString()) : a;\r\n\t\t\tc = Integer;\r\n\t\t}\r\n\t\tif (d == Decimal || d == UntypedAtomic) {\r\n\t\t\tb = d == UntypedAtomic ? new Integer(b.toString()) : b;\r\n\t\t\td = Integer;\r\n\t\t}\r\n\t}\r\n\tif (c == String || d == String) {\r\n\t\tif (c == UntypedAtomic) {\r\n\t\t\ta = a.toString();\r\n\t\t\tc = String;\r\n\t\t}\r\n\t\tif (d == UntypedAtomic) {\r\n\t\t\tb = a.toString();\r\n\t\t\td = String;\r\n\t\t}\r\n\t}\r\n\treturn [a, b];\r\n}\r\n\r\nfunction generalComp(opfn, $a, $b) {\r\n\treturn pipe(switchMap(a => forEach(b => opfn(a,b))($b)),first(x => x,false))($a);\r\n}\r\n\r\n\r\n/**\r\n * expect functions\r\n */\r\nexport function and($a, $b) {\r\n\treturn switchMap(boolean($a()), a => a ? switchMap(boolean($b()),impl.and(a)) : false);\r\n}\r\n\r\nexport function or($a, $b) {\r\n\treturn switchMap(boolean($a()), a => a ? true : switchMap(boolean($b()),impl.or(a)));\r\n}\r\n\r\nconst logic = {\r\n\tand: and,\r\n\tor: or,\r\n\tnot: not\r\n};\r\n\r\nconst opinv = {\r\n\tne: true,\r\n\t\"!=\": true\r\n};\r\n\r\n// NOTE cardinality tests should be taken care of by VM\r\nexport function op($a, operator, $b) {\r\n\tvar invert = false,\r\n\t\tcomp = false,\r\n\t\tgeneral = false,\r\n\t\toperatorName;\r\n\tvar opfn;\r\n\tif (typeof operator == \"string\") {\r\n\t\tinvert = opinv[operator];\r\n\t\tconst hasUnaOp = isUndef($b) && unaryOperatorMap.hasOwnProperty(operator);\r\n\t\tconst hasOp = hasUnaOp || operatorMap.hasOwnProperty(operator);\r\n\t\tif(!hasOp){\r\n\t\t\tgeneral = operator in generalOperatorMap;\r\n\t\t\tif(!general) return error(\"xxx\", \"No such operator\");\r\n\t\t\toperatorName = generalOperatorMap[operator];\r\n\t\t} else {\r\n\t\t\toperatorName = hasUnaOp ? unaryOperatorMap[operator] : operatorMap[operator];\r\n\t\t}\r\n\t\tif (logic[operatorName]) {\r\n\t\t\treturn logic[operatorName]($a, $b);\r\n\t\t} else if(hasUnaOp) {\r\n\t\t\topfn = _unaOp.bind(null, operatorName, invert);\r\n\t\t} else {\r\n\t\t\tcomp = compProto.hasOwnProperty(operatorName);\r\n\t\t\topfn = _binOp.bind(null, operatorName, invert);\r\n\t\t}\r\n\t\tif (comp) {\r\n\t\t\tconst md = forEach(data);\r\n\t\t\t$a = md($a);\r\n\t\t\t$b = md($b);\r\n\t\t}\r\n\t} else if (typeof operator == \"function\") {\r\n\t\topfn = operator;\r\n\t} else {\r\n\t\treturn error(\"XPST0017\", \"Unknown operator: \"+operator);\r\n\t}\r\n\tif(general) return generalComp(opfn, $a, $b);\r\n\tif(isNull($a) || isNull($b)) return null;\r\n\treturn opfn($a, $b);\r\n}\r\n\r\nexport function data($a) {\r\n\treturn switchMap($a, a => {\r\n\t\tif(isVNode(a)) {\r\n\t\t\treturn new UntypedAtomic(stringJoin(pipe(filter(node => node.type == 2 || node.type == 3),forEach(node => impl.nodeData(node)))(traverse(a))));\r\n\t\t} else {\r\n\t\t\treturn a;\r\n\t\t}\r\n\t});\r\n}\r\n\r\n/*\r\n * Pojo L3 constructors\r\n */\r\nconst has = (obj,prop) => obj.hasOwnProperty(prop);\r\nexport const m = (...a) => a.reduce((o,{$key,$value}) => {\r\n\to[$key] = $value;\r\n\treturn o;\r\n},{});\r\nexport const l = (...a) => a;\r\nexport const e = (qname,...a) => {\r\n\t// check if first arg is attrMap\r\n\tconst len = a.length;\r\n\tconst node = {};\r\n\tnode.$name = qname;\r\n\tnode.$children = [];\r\n\tfor(let i = 0; i < len; i++) {\r\n\t\tlet c = a[i];\r\n\t\tif(typeof c == \"function\") c = c();\r\n\t\tif(has(c,\"$key\")) {\r\n\t\t\tnode[c.$key] = c.$value;\r\n\t\t} else {\r\n\t\t\tnode.$children.push(c);\r\n\t\t}\r\n\t}\r\n\treturn node;\r\n};\r\nexport const a = (key,val) => ({$key:key,$value:val});\r\n"],"file":"type.js"}