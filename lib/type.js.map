{"version":3,"sources":["../src/type.js"],"names":["operatorMap","generalOperatorMap","Object","assign","String","prototype","compProto","Float","opProto","Number","Boolean","asType","cc","ifEmpty","prep","id","a","decimal","Decimal","integer","Integer","string","data","number","NaN","float","double","castAs","b","constructor","toString","to","$a","$b","call","$f","f","apply","_op","op","invert","ret","undefined","_promote","c","d","UntypedAtomic","generalComp","opfn","x","and","impl","or","logic","not","opinv","ne","operator","comp","general","hasOp","operatorName","hasOwnProperty","bind","md","node","type","nodeData"],"mappings":"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","sourcesContent":["import Decimal from \"big.js\";\r\n\r\nimport Integer from \"./types/integer\";\r\n\r\nimport Float from \"./types/float\";\r\n\r\nimport UntypedAtomic from \"./types/untyped-atomic\";\r\n\r\nimport opProto from \"./types/op-proto\";\r\n\r\nimport compProto from \"./types/comp-proto\";\r\n\r\nimport { stringJoin } from \"./string/value\";\r\n\r\nimport { error } from \"./error\";\r\n\r\nimport { forEach, filter, range, switchMap, pipe, first } from \"./seq\";\r\n\r\nimport { isArray, get as aGet } from \"./array\";\r\n\r\nimport { isMap, get as mGet } from \"./map\";\r\n\r\nimport { isUndef, isNull, id } from \"./util\";\r\n\r\nimport { isVNode, traverse } from \"l3n\";\r\n\r\nimport { boolean, not } from \"./boolean/value\";\r\n\r\nimport * as impl from \"./impl\";\r\n\r\n// TODO complete math (e.g. type checks for idiv and friends)\r\n\r\n// one big pile\r\nexport const operatorMap = {\r\n\t\"+\": \"plus\",\r\n\t\"-\": \"minus\",\r\n\t\"*\": \"times\",\r\n\t\"div\": \"div\",\r\n\t\"/\": \"div\",\r\n\t\"idiv\": \"div\",\r\n\t\"eq\": \"eq\",\r\n\t\"ne\": \"eq\",\r\n\t\"gt\": \"gt\",\r\n\t\"lt\": \"lt\",\r\n\t\"ge\": \"gte\",\r\n\t\"le\": \"gte\",\r\n\t\"&&\": \"and\",\r\n\t\"||\": \"or\",\r\n\t\"!\": \"not\"\r\n};\r\n\r\nexport const generalOperatorMap = {\r\n\t\">\": \"gt\",\r\n\t\"<\": \"lt\",\r\n\t\">=\": \"gte\",\r\n\t\"<=\": \"lte\",\r\n\t\"=\": \"eq\",\r\n\t\"!=\": \"eq\"\r\n};\r\n\r\n// mixin comparators\r\nObject.assign(String.prototype, compProto);\r\n\r\nObject.assign(Float.prototype, compProto, opProto);\r\n\r\nObject.assign(Number.prototype, compProto, opProto);\r\n\r\nObject.assign(Boolean.prototype, compProto);\r\n\r\n// TODO decimal opt-in/out\r\n\r\nconst asType = (cc,ifEmpty,prep = id) => a => isUndef(a) ? cc : isNull(a) ? ifEmpty : cc(prep(a));\r\n\r\n// TODO create from Type classes\r\nexport const decimal = asType(Decimal,null);\r\n\r\nexport const integer = asType(Integer,null);\r\n\r\nexport const string = asType(String,String(),a => isVNode(a) ? data(a) : a);\r\n\r\nexport const number = asType(Number,NaN);\r\n\r\n// 32-bits float\r\nexport const float = asType(Float,NaN);\r\n\r\nexport const double = number;\r\n\r\nexport function castAs(a, b) {\r\n\treturn a.constructor !== b ? new b(a.toString()) : a;\r\n}\r\n\r\nexport function to($a, $b) {\r\n\treturn range($b, $a);\r\n}\r\n\r\nexport function call($f,...a) {\r\n\tswitchMap($f, f => {\r\n\t\tif (isArray(f)) {\r\n\t\t\treturn aGet(f,a[0]);\r\n\t\t} else if (isMap(f)) {\r\n\t\t\treturn mGet(f,a[0]);\r\n\t\t} else {\r\n\t\t\treturn f.apply(this, a);\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// TODO move to VM\r\n/*\r\nfunction numbertest(a) {\r\n\tvar c = a.constructor;\r\n\tif (c == String || c == Boolean) return;\r\n\treturn true;\r\n}\r\n*/\r\nfunction _op(op, invert, a, b) {\r\n\tvar ret;\r\n\tif (a === undefined || b === undefined) {\r\n\t\treturn error(\"A value may never be undefined\");\r\n\t}\r\n\tif (typeof a[op] == \"function\") {\r\n\t\t[a,b] = _promote(a, b);\r\n\t\tret = a[op](b);\r\n\t} else {\r\n\t\treturn error(\"XPST0017\",\"Operator \" + op + \" not implemented\");\r\n\t}\r\n\treturn invert ? !ret : ret;\r\n}\r\n\r\nfunction _promote(a, b) {\r\n\t// TODO FIXME use JS type casting! 1 == \"1\"\r\n\t//If each operand is an instance of one of the types xs:string or xs:anyURI, then both operands are cast to type xs:string.\r\n\t//If each operand is an instance of one of the types xs:decimal or xs:float, then both operands are cast to type xs:float.\r\n\t//If each operand is an instance of one of the types xs:decimal, xs:float, or xs:double, then both operands are cast to type xs:double.\r\n\tvar c = a.constructor,\r\n\t\td = b.constructor;\r\n\tif (c == Number || d == Number) {\r\n\t\tif (c == Integer || c == Decimal || c == Float || c == UntypedAtomic) {\r\n\t\t\ta = +a.toString();\r\n\t\t\tc = Number;\r\n\t\t}\r\n\t\tif (d == Integer || d == Decimal || d == Float || d == UntypedAtomic) {\r\n\t\t\tb = +b.toString();\r\n\t\t\td = Number;\r\n\t\t}\r\n\t}\r\n\tif (c == Integer || d == Integer) {\r\n\t\tif (c == Decimal || c == UntypedAtomic) {\r\n\t\t\ta = c == UntypedAtomic ? new Integer(a.toString()) : a;\r\n\t\t\tc = Integer;\r\n\t\t}\r\n\t\tif (d == Decimal || d == UntypedAtomic) {\r\n\t\t\tb = d == UntypedAtomic ? new Integer(b.toString()) : b;\r\n\t\t\td = Integer;\r\n\t\t}\r\n\t}\r\n\tif (c == String || d == String) {\r\n\t\tif (c == UntypedAtomic) {\r\n\t\t\ta = a.toString();\r\n\t\t\tc = String;\r\n\t\t}\r\n\t\tif (d == UntypedAtomic) {\r\n\t\t\tb = a.toString();\r\n\t\t\td = String;\r\n\t\t}\r\n\t}\r\n\treturn [a, b];\r\n}\r\n\r\nfunction generalComp(opfn, $a, $b) {\r\n\treturn pipe(switchMap(a => forEach(b => opfn(a,b))($b)),first(x => x,false))($a);\r\n}\r\n\r\n\r\n/**\r\n *\r\n */\r\nexport function and($a, $b) {\r\n\treturn switchMap(boolean($a()), a => a ? switchMap(boolean($b()),impl.and) : false);\r\n}\r\n\r\nexport function or($a, $b) {\r\n\treturn switchMap(boolean($a()), a => a ? true : switchMap(boolean($b()),impl.or));\r\n}\r\n\r\nconst logic = {\r\n\tand: and,\r\n\tor: or,\r\n\tnot: not\r\n};\r\n\r\nconst opinv = {\r\n\tne: true,\r\n\t\"!=\": true\r\n};\r\n\r\n// NOTE cardinality tests should be taken care of by VM\r\nexport function op($a, operator, $b) {\r\n\tvar invert = false,\r\n\t\tcomp = false,\r\n\t\tgeneral = false,\r\n\t\thasOp = false,\r\n\t\toperatorName;\r\n\tvar opfn;\r\n\tif (typeof operator == \"string\") {\r\n\t\tinvert = opinv[operator];\r\n\t\thasOp = operator in operatorMap;\r\n\t\tif(!hasOp){\r\n\t\t\tgeneral = operator in generalOperatorMap;\r\n\t\t\tif(!general) return error(\"xxx\", \"No such operator\");\r\n\t\t\toperatorName = generalOperatorMap[operator];\r\n\t\t} else {\r\n\t\t\toperatorName = operatorMap[operator];\r\n\t\t}\r\n\t\tif (logic[operatorName]) {\r\n\t\t\treturn logic[operatorName]($a, $b);\r\n\t\t} else {\r\n\t\t\tcomp = compProto.hasOwnProperty(operatorName);\r\n\t\t\topfn = _op.bind(null, operatorName, invert);\r\n\t\t}\r\n\t\tif (comp) {\r\n\t\t\tconst md = forEach(data);\r\n\t\t\t$a = md($a);\r\n\t\t\t$b = md($b);\r\n\t\t}\r\n\t} else if (typeof operator == \"function\") {\r\n\t\topfn = operator;\r\n\t} else {\r\n\t\treturn error(\"XPST0017\", \"Unknown operator: \"+operator);\r\n\t}\r\n\tif(general) return generalComp(opfn, $a, $b);\r\n\tif(isNull($a) || isNull($b)) return null;\r\n\treturn opfn($a, $b);\r\n}\r\n\r\nfunction data($a) {\r\n\treturn switchMap($a, a => {\r\n\t\tif(isVNode(a)) {\r\n\t\t\treturn new UntypedAtomic(stringJoin(pipe(filter(node => node.type == 2 || node.type == 3),forEach(node => impl.nodeData(node)))(traverse(a))));\r\n\t\t} else {\r\n\t\t\treturn a;\r\n\t\t}\r\n\t});\r\n}\r\n"],"file":"type.js"}