{"version":3,"sources":["../src/multimap.js"],"names":["MultiMap","_buckets","_size","__is_MultiMap","prototype","push","entry","key","bucket","__is_Bucket","Bucket","get","vals","_values","len","length","out","Array","i","keys","l","val","multimap"],"mappings":";;;;;;;AAAA,SAASA,QAAT,GAAmB;AAClB,OAAKC,QAAL,GAAgB,EAAhB;AACA,OAAKC,KAAL,GAAa,CAAb;AACA,OAAKC,aAAL,GAAqB,IAArB;AACA;;AAEDH,QAAQ,CAACI,SAAT,CAAmBC,IAAnB,GAA0B,UAASC,KAAT,EAAe;AACxC,MAAIC,GAAG,GAAGD,KAAK,CAAC,CAAD,CAAf;AACA,MAAIE,MAAM,GAAG,KAAKP,QAAL,CAAcM,GAAd,CAAb;AACAD,EAAAA,KAAK,CAAC,CAAD,CAAL,GAAW,KAAKJ,KAAL,EAAX;;AACA,MAAGM,MAAM,IAAIA,MAAM,CAACC,WAApB,EAAiC;AAChCD,IAAAA,MAAM,CAACH,IAAP,CAAYC,KAAZ;AACA,GAFD,MAEO;AACN,SAAKL,QAAL,CAAcM,GAAd,IAAqB,IAAIG,MAAJ,CAAWJ,KAAX,CAArB;AACA;;AACD,SAAO,IAAP;AACA,CAVD;;AAYAN,QAAQ,CAACI,SAAT,CAAmBO,GAAnB,GAAyB,UAASJ,GAAT,EAAa;AACrC,MAAIC,MAAM,GAAG,KAAKP,QAAL,CAAcM,GAAd,CAAb;;AACA,MAAGC,MAAM,IAAIA,MAAM,CAACC,WAApB,EAAiC;AAChC,QAAIG,IAAI,GAAGJ,MAAM,CAACK,OAAlB;AAAA,QAA2BC,GAAG,GAAGF,IAAI,CAACG,MAAtC;AACA,QAAGD,GAAG,KAAK,CAAX,EAAc;AACd,QAAGA,GAAG,IAAI,CAAV,EAAa,OAAOF,IAAI,CAAC,CAAD,CAAJ,CAAQ,CAAR,CAAP,CAHmB,CAIhC;;AACA,QAAII,GAAG,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAV;;AACA,SAAI,IAAII,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGJ,GAAnB,EAAwBI,CAAC,EAAzB,EAA6BF,GAAG,CAACE,CAAD,CAAH,GAASN,IAAI,CAACM,CAAD,CAAJ,CAAQ,CAAR,CAAT;;AAC7B,WAAOF,GAAP;AACA;AACD,CAXD;;AAaAhB,QAAQ,CAACI,SAAT,CAAmBe,IAAnB,GAA0B,YAAU;AACnC;AACA,MAAIA,IAAI,GAAG,EAAX;;AACA,OAAI,IAAID,CAAC,GAAC,CAAN,EAAQE,CAAC,GAAC,KAAKnB,QAAL,CAAcc,MAA5B,EAAmCG,CAAC,GAACE,CAArC,EAAuCF,CAAC,EAAxC,EAA4C;AAC3CC,IAAAA,IAAI,CAACD,CAAD,CAAJ,GAAU,KAAKjB,QAAL,CAAciB,CAAd,EAAiB,CAAjB,CAAV;AACA;;AACD,SAAOC,IAAP;AACA,CAPD;;AASA,SAAST,MAAT,CAAgBW,GAAhB,EAAoB;AACnB,OAAKR,OAAL,GAAe,CAACQ,GAAD,CAAf;AACA,OAAKZ,WAAL,GAAmB,IAAnB;AACA;;AAEDC,MAAM,CAACN,SAAP,CAAiBC,IAAjB,GAAwB,UAASgB,GAAT,EAAa;AACpC,OAAKR,OAAL,CAAaR,IAAb,CAAkBgB,GAAlB;;AACA,SAAO,IAAP;AACA,CAHD;;AAKe,SAASC,QAAT,GAAmB;AACjC,SAAO,IAAItB,QAAJ,EAAP;AACA","sourcesContent":["function MultiMap(){\n\tthis._buckets = {};\n\tthis._size = 0;\n\tthis.__is_MultiMap = true;\n}\n\nMultiMap.prototype.push = function(entry){\n\tvar key = entry[0];\n\tvar bucket = this._buckets[key];\n\tentry[2] = this._size++;\n\tif(bucket && bucket.__is_Bucket) {\n\t\tbucket.push(entry);\n\t} else {\n\t\tthis._buckets[key] = new Bucket(entry);\n\t}\n\treturn this;\n};\n\nMultiMap.prototype.get = function(key){\n\tvar bucket = this._buckets[key];\n\tif(bucket && bucket.__is_Bucket) {\n\t\tvar vals = bucket._values, len = vals.length;\n\t\tif(len === 0) return;\n\t\tif(len == 1) return vals[0][1];\n\t\t// TODO fix order if needed\n\t\tvar out = new Array(len);\n\t\tfor(var i = 0; i < len; i++) out[i] = vals[i][1];\n\t\treturn out;\n\t}\n};\n\nMultiMap.prototype.keys = function(){\n\t// retain key types\n\tvar keys = [];\n\tfor(var i=0,l=this._buckets.length;i<l;i++) {\n\t\tkeys[i] = this._buckets[i][0];\n\t}\n\treturn keys;\n};\n\nfunction Bucket(val){\n\tthis._values = [val];\n\tthis.__is_Bucket = true;\n}\n\nBucket.prototype.push = function(val){\n\tthis._values.push(val);\n\treturn this;\n};\n\nexport default function multimap(){\n\treturn new MultiMap();\n}\n"],"file":"multimap.js"}