{"version":3,"sources":["../../src/string/regex.js"],"names":["_regexpCache","_cached","pat","toString","regex","_replaceCache","_repcached","rep","normal","replace","matches","str","test","valueOf","XRegExp","tokenize","split","analyzeString","ret","index","args","match","shift","pop","idx","substring","length","len","$me","children","i","_","undefined","Number","clen","$last","substr"],"mappings":"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","sourcesContent":["import XRegExp from \"xregexp\";\r\n\r\nimport { e, a, x } from \"l3n\";\r\n\r\nimport { appendChild } from \"../modify\";\r\n\r\nconst _regexpCache = {};\r\n\r\nfunction _cached(pat){\r\n\tpat = pat.toString();\r\n\tif(pat in _regexpCache) return _regexpCache[pat];\r\n\tvar regex = XRegExp(pat,\"g\");\r\n\t_regexpCache[pat] = regex;\r\n\treturn regex;\r\n}\r\n\r\nconst _replaceCache = {};\r\n\r\n// FIXME move to transpiler!\r\nfunction _repcached(rep){\r\n\trep = rep.toString();\r\n\tif(rep in _replaceCache) return _replaceCache[rep];\r\n\tvar normal = rep.replace(/(^|[^\\\\])\\\\\\$/g,\"$$$$\").replace(/\\\\\\\\\\$/g,\"\\\\$$\");\r\n\t_replaceCache[rep] = normal;\r\n\treturn normal;\r\n}\r\n\r\nexport function matches(str,pat) {\r\n\treturn _cached(pat).test(str.valueOf());\r\n}\r\n\r\nexport function replace(str,pat,rep) {\r\n\treturn XRegExp.replace(str.valueOf(),_cached(pat),_repcached(rep),\"all\");\r\n}\r\n\r\nexport function tokenize(str,pat) {\r\n\treturn str.split(_cached(pat));\r\n}\r\n\r\nexport function analyzeString(str,pat) {\r\n\tvar ret = e(\"fn:analyze-string-result\");\r\n\tvar index = 0;\r\n\tif(!str) return ret;\r\n\tXRegExp.replace(str.toString(),_cached(pat),function(... args){\r\n\t\tvar match = args.shift();\r\n\t\tvar str = args.pop();\r\n\t\tvar idx = args.pop();\r\n\t\t// the rest is groups\r\n\t\tif(idx > index) ret = appendChild(ret,e(\"fn:non-match\",x(str.substring(index,idx))));\r\n\t\tindex = idx + match.length;\r\n\t\tvar len = args.length;\r\n\t\tvar $me = e(\"fn:match\");\r\n\t\tif(len > 0) {\r\n\t\t\tvar children = [];\r\n\t\t\tfor(let i = 0;i<len;i++){\r\n\t\t\t\tlet _ = args[i];\r\n\t\t\t\tif (_ !== undefined) {\r\n\t\t\t\t\t// nest optional groups that are empty\r\n\t\t\t\t\t// TODO nested groups\r\n\t\t\t\t\tif(_ !== \"\") {\r\n\t\t\t\t\t\tchildren[i] = e(\"fn:group\",a(\"nr\",Number(i+1),x(_)));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvar clen = children.length;\r\n\t\t\t\t\t\tif(clen) {\r\n\t\t\t\t\t\t\tvar $last = children[clen - 1];\r\n\t\t\t\t\t\t\tchildren[clen - 1] = appendChild($last,e(\"fn:group\",a(\"nr\",Number(i+1))));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(children[i]) $me = appendChild($me,children[i]);\r\n\t\t\t}\r\n\t\t\tif(children.length) ret = appendChild(ret,$me);\r\n\t\t} else if(match) {\r\n\t\t\t$me = appendChild($me,x(match));\r\n\t\t\tret = appendChild(ret,$me);\r\n\t\t}\r\n\t});\r\n\tif(index < str.length) ret = appendChild(ret,e(\"fn:non-match\",x(str.substr(index))));\r\n\t// TODO finalize for persistent\r\n\treturn ret;\r\n}\r\n"],"file":"regex.js"}