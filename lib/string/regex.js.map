{"version":3,"sources":["../../src/string/regex.js"],"names":["_regexpCache","_cached","pat","toString","regex","_replaceCache","_repcached","rep","normal","replace","matches","str","test","valueOf","XRegExp","tokenize","split","analyzeString","ret","index","args","match","shift","pop","idx","substring","length","len","$me","children","i","_","undefined","Number","clen","$last","substr"],"mappings":"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","sourcesContent":["import XRegExp from \"xregexp\";\n\nimport { e, a, x } from \"l3n\";\n\nimport { appendChild } from \"../modify\";\n\nconst _regexpCache = {};\n\nfunction _cached(pat){\n\tpat = pat.toString();\n\tif(pat in _regexpCache) return _regexpCache[pat];\n\tvar regex = XRegExp(pat,\"g\");\n\t_regexpCache[pat] = regex;\n\treturn regex;\n}\n\nconst _replaceCache = {};\n\n// FIXME move to transpiler!\nfunction _repcached(rep){\n\trep = rep.toString();\n\tif(rep in _replaceCache) return _replaceCache[rep];\n\tvar normal = rep.replace(/(^|[^\\\\])\\\\\\$/g,\"$$$$\").replace(/\\\\\\\\\\$/g,\"\\\\$$\");\n\t_replaceCache[rep] = normal;\n\treturn normal;\n}\n\nexport function matches(str,pat) {\n\treturn _cached(pat).test(str.valueOf());\n}\n\nexport function replace(str,pat,rep) {\n\treturn XRegExp.replace(str.valueOf(),_cached(pat),_repcached(rep),\"all\");\n}\n\nexport function tokenize(str,pat) {\n\treturn str.split(_cached(pat));\n}\n\nexport function analyzeString(str,pat) {\n\tvar ret = e(\"fn:analyze-string-result\");\n\tvar index = 0;\n\tif(!str) return ret;\n\tXRegExp.replace(str.toString(),_cached(pat),function(... args){\n\t\tvar match = args.shift();\n\t\tvar str = args.pop();\n\t\tvar idx = args.pop();\n\t\t// the rest is groups\n\t\tif(idx > index) ret = appendChild(ret,e(\"fn:non-match\",x(str.substring(index,idx))));\n\t\tindex = idx + match.length;\n\t\tvar len = args.length;\n\t\tvar $me = e(\"fn:match\");\n\t\tif(len > 0) {\n\t\t\tvar children = [];\n\t\t\tfor(let i = 0;i<len;i++){\n\t\t\t\tlet _ = args[i];\n\t\t\t\tif (_ !== undefined) {\n\t\t\t\t\t// nest optional groups that are empty\n\t\t\t\t\t// TODO nested groups\n\t\t\t\t\tif(_ !== \"\") {\n\t\t\t\t\t\tchildren[i] = e(\"fn:group\",a(\"nr\",Number(i+1),x(_)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar clen = children.length;\n\t\t\t\t\t\tif(clen) {\n\t\t\t\t\t\t\tvar $last = children[clen - 1];\n\t\t\t\t\t\t\tchildren[clen - 1] = appendChild($last,e(\"fn:group\",a(\"nr\",Number(i+1))));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(children[i]) $me = appendChild($me,children[i]);\n\t\t\t}\n\t\t\tif(children.length) ret = appendChild(ret,$me);\n\t\t} else if(match) {\n\t\t\t$me = appendChild($me,x(match));\n\t\t\tret = appendChild(ret,$me);\n\t\t}\n\t});\n\tif(index < str.length) ret = appendChild(ret,e(\"fn:non-match\",x(str.substr(index))));\n\t// TODO finalize for persistent\n\treturn ret;\n}\n"],"file":"regex.js"}