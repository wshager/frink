{"version":3,"sources":["../src/fs.js"],"names":["readFile","args","l","length","source","cb","options","encoding","isNodeEnv","require","reader","FileReader","onloadend","evt","target","result","onerror","err","readAsText","readdir","apply"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,WAAW,CAAC,GAAGC,IAAJ,KAAa;AACpC,QAAMC,IAAID,KAAKE,MAAf;AACA,QAAMC,SAASH,KAAK,CAAL,CAAf;AACA,QAAMI,KAAKH,KAAK,CAAL,GAASD,KAAK,CAAL,CAAT,GAAmBA,KAAK,CAAL,CAA9B;AACA,MAAIK,UAAUJ,KAAK,CAAL,GAAS,OAAT,GAAmBD,KAAK,CAAL,CAAjC;AACA,MAAG,OAAOK,OAAP,IAAkB,QAArB,EAA+BA,UAAU;AAACC,cAASD;AAAV,GAAV;;AAC/B,MAAGE,eAAH,EAAc;AACbC,YAAQ,IAAR,EAAcT,QAAd,CAAuBI,MAAvB,EAA8BE,OAA9B,EAAsCD,EAAtC;AACA,GAFD,MAEO;AACN,QAAIK,SAAS,IAAIC,UAAJ,EAAb;;AACAD,WAAOE,SAAP,GAAmBC,OAAO;AACzB;AACAR,SAAG,IAAH,EAAQQ,IAAIC,MAAJ,CAAWC,MAAnB;AACA,KAHD;;AAIAL,WAAOM,OAAP,GAAiBC,OAAO;AACvBZ,SAAGY,GAAH;AACA,KAFD;;AAGAP,WAAOQ,UAAP,CAAkBd,MAAlB,EAA0BE,QAAQC,QAAlC;AACA;AACD,CAnBM;;;;AAqBA,MAAMY,UAAU,CAAC,GAAGlB,IAAJ,KACtBO,kBACCC,QAAQ,IAAR,EAAcU,OAAd,CAAsBC,KAAtB,SAAiCnB,IAAjC,CADD,GAEC,MAAM,CAAE,CAHH","sourcesContent":["import { isNodeEnv } from \"./util\";\r\n\r\nexport const readFile = (...args) => {\r\n\tconst l = args.length;\r\n\tconst source = args[0];\r\n\tconst cb = l == 2 ? args[1] : args[2];\r\n\tlet options = l == 2 ? \"utf-8\" : args[1];\r\n\tif(typeof options == \"string\") options = {encoding:options};\r\n\tif(isNodeEnv) {\r\n\t\trequire(\"fs\").readFile(source,options,cb);\r\n\t} else {\r\n\t\tvar reader = new FileReader();\r\n\t\treader.onloadend = evt => {\r\n\t\t\t// file is loaded\r\n\t\t\tcb(null,evt.target.result);\r\n\t\t};\r\n\t\treader.onerror = err => {\r\n\t\t\tcb(err);\r\n\t\t};\r\n\t\treader.readAsText(source, options.encoding);\r\n\t}\r\n};\r\n\r\nexport const readdir = (...args) =>\r\n\tisNodeEnv ?\r\n\t\trequire(\"fs\").readdir.apply(this,args) :\r\n\t\t() => {};\r\n"],"file":"fs.js"}