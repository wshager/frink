{"version":3,"sources":["../src/fs.js"],"names":["readFile","args","l","length","source","cb","options","encoding","isNodeEnv","require","reader","FileReader","onloadend","evt","target","result","onerror","err","readAsText","readdir","apply"],"mappings":";;;;;;;AAAA;;AAEO,MAAMA,QAAQ,GAAG,CAAC,GAAGC,IAAJ,KAAa;AACpC,QAAMC,CAAC,GAAGD,IAAI,CAACE,MAAf;AACA,QAAMC,MAAM,GAAGH,IAAI,CAAC,CAAD,CAAnB;AACA,QAAMI,EAAE,GAAGH,CAAC,IAAI,CAAL,GAASD,IAAI,CAAC,CAAD,CAAb,GAAmBA,IAAI,CAAC,CAAD,CAAlC;AACA,MAAIK,OAAO,GAAGJ,CAAC,IAAI,CAAL,GAAS,OAAT,GAAmBD,IAAI,CAAC,CAAD,CAArC;AACA,MAAG,OAAOK,OAAP,IAAkB,QAArB,EAA+BA,OAAO,GAAG;AAACC,IAAAA,QAAQ,EAACD;AAAV,GAAV;;AAC/B,MAAGE,eAAH,EAAc;AACbC,IAAAA,OAAO,CAAC,IAAD,CAAP,CAAcT,QAAd,CAAuBI,MAAvB,EAA8BE,OAA9B,EAAsCD,EAAtC;AACA,GAFD,MAEO;AACN,QAAIK,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,SAAP,GAAmBC,GAAG,IAAI;AACzB;AACAR,MAAAA,EAAE,CAAC,IAAD,EAAMQ,GAAG,CAACC,MAAJ,CAAWC,MAAjB,CAAF;AACA,KAHD;;AAIAL,IAAAA,MAAM,CAACM,OAAP,GAAiBC,GAAG,IAAI;AACvBZ,MAAAA,EAAE,CAACY,GAAD,CAAF;AACA,KAFD;;AAGAP,IAAAA,MAAM,CAACQ,UAAP,CAAkBd,MAAlB,EAA0BE,OAAO,CAACC,QAAlC;AACA;AACD,CAnBM;;;;AAqBA,MAAMY,OAAO,GAAG,CAAC,GAAGlB,IAAJ,KACtBO,kBACCC,OAAO,CAAC,IAAD,CAAP,CAAcU,OAAd,CAAsBC,KAAtB,SAAiCnB,IAAjC,CADD,GAEC,MAAM,CAAE,CAHH","sourcesContent":["import { isNodeEnv } from \"./util\";\n\nexport const readFile = (...args) => {\n\tconst l = args.length;\n\tconst source = args[0];\n\tconst cb = l == 2 ? args[1] : args[2];\n\tlet options = l == 2 ? \"utf-8\" : args[1];\n\tif(typeof options == \"string\") options = {encoding:options};\n\tif(isNodeEnv) {\n\t\trequire(\"fs\").readFile(source,options,cb);\n\t} else {\n\t\tvar reader = new FileReader();\n\t\treader.onloadend = evt => {\n\t\t\t// file is loaded\n\t\t\tcb(null,evt.target.result);\n\t\t};\n\t\treader.onerror = err => {\n\t\t\tcb(err);\n\t\t};\n\t\treader.readAsText(source, options.encoding);\n\t}\n};\n\nexport const readdir = (...args) =>\n\tisNodeEnv ?\n\t\trequire(\"fs\").readdir.apply(this,args) :\n\t\t() => {};\n"],"file":"fs.js"}